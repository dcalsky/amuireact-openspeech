{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///amuireact-openspeech.js","webpack:///webpack/bootstrap 349d397762db7647bba8","webpack:///./index.js","webpack:///./src/OpenspeechRecorder.js","webpack:///external \"react\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_react","_react2","OpenspeechRecorder","createClass","displayName","propTypes","signature","PropTypes","string","isRequired","username","enable","bool","appid","timestamp","expires","number","url","reconnection","resultType","resultCharset","punctuationType","getVolume","func","getResult","getCurrentMessage","vadPath","recorderPath","speexWorkerPath","getDefaultProps","volume","err","result","message","componentWillReceiveProps","nextProps","prevProps","_handleStartListen","_handleStopListen","componentWillUpdate","nextState","state","_initSession","getInitialState","loadCompleted","session","ssbParam","IFlyIatSession","props","reconnectionDelay","compress","vad_path","recorder_path","speex_path","setState","grammar_list","params","toString","componentWillMount","undefined","_getMessage","start","stop","render","style","createElement","className","children"],"mappings":"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","file":"amuireact-openspeech.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-openspeech\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"react-openspeech\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-openspeech\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"react-openspeech\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(1);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * @class OpenspeechRecorder\n\t * @props\n\t */\n\t\n\tvar OpenspeechRecorder = _react2.default.createClass({\n\t  displayName: 'OpenspeechRecorder',\n\t\n\t  propTypes: {\n\t    signature: _react2.default.PropTypes.string.isRequired,\n\t    username: _react2.default.PropTypes.string.isRequired,\n\t    enable: _react2.default.PropTypes.bool.isRequired, // component state of running\n\t    appid: _react2.default.PropTypes.string.isRequired, // your private app id\n\t    timestamp: _react2.default.PropTypes.string.isRequired, // As same as the timestamp of signature\n\t    expires: _react2.default.PropTypes.number.isRequired, // As same as the expires of signature\n\t    url: _react2.default.PropTypes.string, // Server address\n\t    reconnection: _react2.default.PropTypes.bool, // Whether client support reconnection after disconnecting\n\t    resultType: _react2.default.PropTypes.string, // Format for result: json or plain\n\t    resultCharset: _react2.default.PropTypes.string, // Format of result charset\n\t    punctuationType: _react2.default.PropTypes.number, // Whether result includes punctuation marks\n\t    getVolume: _react2.default.PropTypes.func, // A callback function to get the current volume\n\t    getResult: _react2.default.PropTypes.func, // A callback function to get the result from server\n\t    getCurrentMessage: _react2.default.PropTypes.func, // A callback function to get the current status\n\t    vadPath: _react2.default.PropTypes.string, //\n\t    recorderPath: _react2.default.PropTypes.string,\n\t    speexWorkerPath: _react2.default.PropTypes.string\n\t  },\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      enable: false,\n\t      expires: 10000, // A day\n\t      url: 'http://webapi.openspeech.cn/',\n\t      reconnection: true,\n\t      resultType: 'json',\n\t      resultCharset: 'utf8',\n\t      punctuationType: 1, // the default result has punctuation marks\n\t      getVolume: function getVolume(volume) {},\n\t      getResult: function getResult(err, result) {},\n\t      getCurrentMessage: function getCurrentMessage(message) {}\n\t    };\n\t  },\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps, prevProps) {\n\t    var enable = nextProps.enable !== prevProps.enable && nextProps.enable;\n\t    if (enable) {\n\t      this._handleStartListen();\n\t    } else {\n\t      this._handleStopListen();\n\t    }\n\t  },\n\t  componentWillUpdate: function componentWillUpdate(nextProps, nextState) {\n\t    if (!this.state.enable && nextState.enable) {\n\t      this._initSession();\n\t    }\n\t  },\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      loadCompleted: false,\n\t      session: null,\n\t      ssbParam: {},\n\t      result: null\n\t    };\n\t  },\n\t  _initSession: function _initSession() {\n\t    var session = new IFlyIatSession({\n\t      'url': this.props.url,\n\t      'reconnection': this.props.reconnection,\n\t      'reconnectionDelay': 30000,\n\t      'compress': 'speex',\n\t      'vad_path': this.props.vadPath,\n\t      'recorder_path': this.props.recorderPath,\n\t      'speex_path': this.props.speexWorkerPath\n\t    });\n\t    // const signature = md5(this.props.appid + '&' + this.props.timestamp + '&' + this.props.expires.toString() + '&' + this.props.secretKey);\n\t    this.setState({\n\t      loadCompleted: true,\n\t      ssbParam: {\n\t        \"grammar_list\": null,\n\t        \"params\": \"aue=speex-wb;-1, usr = \" + this.props.username + \", ssm = 1, sub = iat, net_type = wifi, rse = \" + this.props.resultCharset + \", ent =sms16k, rst = \" + this.props.resultType + \", auf  = audio/L16;rate=16000, vad_enable = 1, vad_timeout = 5000, vad_speech_tail = 500, compress = igzip, caller.appid = \" + this.props.appid + \", timestamp = \" + this.props.timestamp + \", expires = \" + this.props.expires.toString(),\n\t        \"signature\": this.props.signature\n\t      }\n\t    });\n\t    this.setState({ session: session });\n\t  },\n\t  componentWillMount: function componentWillMount() {\n\t    if (IFlyIatSession === undefined) {\n\t      this.setState({ loadCompleted: false });\n\t      throw 'Not loading correct the Openspeech modules!';\n\t    }\n\t\n\t    if (!this.props.vadPath || !this.props.recorderPath || !this.props.speexWorkerPath) {\n\t      throw 'Not setting url of compress libs!';\n\t    }\n\t    this._initSession();\n\t  },\n\t  _getMessage: function _getMessage(message) {\n\t    if (message === 'onEnd') {\n\t      this.setState({ enable: false });\n\t    }\n\t    this.props.getCurrentMessage(message);\n\t  },\n\t  _handleStartListen: function _handleStartListen() {\n\t    this.state.session.start(this.state.ssbParam, this.props.getVolume, this.props.getResult, this.props.getCurrentMessage);\n\t  },\n\t  _handleStopListen: function _handleStopListen() {\n\t    this.state.session.stop();\n\t  },\n\t  render: function render() {\n\t    var style = this.props.style;\n\t\n\t\n\t    return _react2.default.createElement(\n\t      'div',\n\t      { className: 'am-openspeech-recorder', style: style },\n\t      this.props.children\n\t    );\n\t  }\n\t});\n\t\n\texports.default = OpenspeechRecorder;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** amuireact-openspeech.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 349d397762db7647bba8\n **/","module.exports = require('./src/OpenspeechRecorder.js');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","import React from 'react';\n/**\n * @class OpenspeechRecorder\n * @props\n */\n\nconst OpenspeechRecorder = React.createClass({\n  propTypes: {\n    signature: React.PropTypes.string.isRequired,\n    username: React.PropTypes.string.isRequired,\n    enable: React.PropTypes.bool.isRequired, // component state of running\n    appid: React.PropTypes.string.isRequired, // your private app id\n    timestamp: React.PropTypes.string.isRequired, // As same as the timestamp of signature\n    expires: React.PropTypes.number.isRequired, // As same as the expires of signature\n    url: React.PropTypes.string, // Server address\n    reconnection: React.PropTypes.bool, // Whether client support reconnection after disconnecting\n    resultType: React.PropTypes.string, // Format for result: json or plain\n    resultCharset: React.PropTypes.string, // Format of result charset\n    punctuationType: React.PropTypes.number, // Whether result includes punctuation marks\n    getVolume: React.PropTypes.func, // A callback function to get the current volume\n    getResult: React.PropTypes.func, // A callback function to get the result from server\n    getCurrentMessage: React.PropTypes.func, // A callback function to get the current status\n    vadPath: React.PropTypes.string, //\n    recorderPath: React.PropTypes.string,\n    speexWorkerPath: React.PropTypes.string,\n  },\n  getDefaultProps () {\n    return {\n      enable: false,\n      expires: 10000, // A day\n      url: 'http://webapi.openspeech.cn/',\n      reconnection: true,\n      resultType: 'json',\n      resultCharset: 'utf8',\n      punctuationType: 1, // the default result has punctuation marks\n      getVolume(volume) {\n      },\n      getResult(err, result) {\n      },\n      getCurrentMessage(message) {\n      }\n    };\n  },\n  componentWillReceiveProps(nextProps, prevProps) {\n    const enable = nextProps.enable !== prevProps.enable && nextProps.enable;\n    if (enable) {\n      this._handleStartListen();\n    } else {\n      this._handleStopListen();\n    }\n  },\n  componentWillUpdate (nextProps, nextState) {\n    if (!this.state.enable && nextState.enable) {\n      this._initSession();\n    }\n  },\n  getInitialState() {\n    return {\n      loadCompleted: false,\n      session: null,\n      ssbParam: {},\n      result: null\n    }\n  },\n  _initSession() {\n    let session = new IFlyIatSession({\n      'url': this.props.url,\n      'reconnection': this.props.reconnection,\n      'reconnectionDelay': 30000,\n      'compress': 'speex',\n      'vad_path': this.props.vadPath,\n      'recorder_path': this.props.recorderPath,\n      'speex_path': this.props.speexWorkerPath\n    });\n    // const signature = md5(this.props.appid + '&' + this.props.timestamp + '&' + this.props.expires.toString() + '&' + this.props.secretKey);\n    this.setState({\n      loadCompleted: true,\n      ssbParam: {\n        \"grammar_list\": null,\n        \"params\": \"aue=speex-wb;-1, usr = \" + this.props.username + \", ssm = 1, sub = iat, net_type = wifi, rse = \"\n        + this.props.resultCharset + \", ent =sms16k, rst = \" + this.props.resultType\n        + \", auf  = audio/L16;rate=16000, vad_enable = 1, vad_timeout = 5000, vad_speech_tail = 500, compress = igzip, caller.appid = \"\n        + this.props.appid + \", timestamp = \" + this.props.timestamp + \", expires = \" + this.props.expires.toString(),\n        \"signature\": this.props.signature\n      }\n    });\n    this.setState({session: session});\n  },\n  componentWillMount() {\n    if (IFlyIatSession === undefined) {\n      this.setState({loadCompleted: false});\n      throw ('Not loading correct the Openspeech modules!');\n    }\n\n    if (!this.props.vadPath || !this.props.recorderPath || !this.props.speexWorkerPath) {\n      throw ('Not setting url of compress libs!');\n    }\n    this._initSession();\n  },\n  _getMessage(message) {\n    if (message === 'onEnd') {\n      this.setState({enable: false});\n    }\n    this.props.getCurrentMessage(message)\n  },\n  _handleStartListen() {\n    this.state.session.start(this.state.ssbParam, this.props.getVolume, this.props.getResult, this.props.getCurrentMessage);\n  },\n  _handleStopListen() {\n    this.state.session.stop();\n  },\n  render() {\n    const {\n      style\n    } = this.props;\n\n    return (\n      <div className=\"am-openspeech-recorder\" style={style}>\n        {this.props.children}\n      </div>\n    );\n  }\n});\n\nexport default OpenspeechRecorder\n\n\n/** WEBPACK FOOTER **\n ** ./src/OpenspeechRecorder.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react\"\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}